#compdef vaultcli

typeset -A opt_args

_vaultcli_commands() {
  local -a _commands
  _commands=(
    'add-card:Add new card to a vault'
    'add-secret:Add new secret to a card'
    'add-vault:Add new vault to a workspace'
    'add-workspace:Add new Vaultier workspace'
    'config:Configure vaultcli'
    'delete-card:Delete a card'
    'delete-secret:Delete a secret'
    'delete-vault:Delete a vault'
    'delete-workspace:Delete a workspace'
    'edit-card:Edit card name or description'
    'edit-secret:Edit secret contents'
    'edit-vault:Edit vault name, description or color'
    'edit-workspace:Edit workspace name or description'
    'export-workspace:Export a workspace to a ZIP file'
    'get-file:Get binary file from a secret'
    'import-workspace:Import a workspace from a JSON file'
    'list-cards:List cards from a vault'
    'list-secrets:List secrets from a card'
    'list-vaults:List vaults from a workspace'
    'list-workspaces:List Vaultier workspaces'
    'show-secret:Show secret contents'
    'tree-workspace:List workspace as tree'
  )
  _describe 'command' _commands
}

_vaultcli_add_secret_commands() {
  local -a _commands
  _commands=(
    'note:Add new secret note'
    'password:Add new secret password'
    'file:Add new secret file'
  )
  _describe 'command' _commands
}

_arguments \
  '(-h --help)'{-h,--help}'[Show help]' \
  '(-c --config)'{-c,--config}'[Use custom configuration file]:configuration file:_files' \
  '(-k --insecure)'{-k,--insecure}'[Allow SSL server connection without certs]' \
  '1: :_vaultcli_commands' \
  '*:: :->args'

case ${words[1]} in
  add-card)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-d --description)'{-d,--description}'[card description]:description' \
      '1:id:()' \
      '2:name:()'
    ;;
  add-secret)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '1: :_vaultcli_add_secret_commands' \
      '*:: :->add_secret_args'
    ;;
  add-vault)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-d --description)'{-d,--description}'[vault description]:description' \
      '--color[vault color]: :(blue orange purple green red)' \
      '1:id:()' \
      '2:name:()'
    ;;
  add-workspace)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-d --description)'{-d,--description}'[workspace description]:description' \
      '1:name:()'
    ;;
  config)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '1:option:()' \
      '2::value:()'
    ;;
  edit-card)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-n --name)'{-n,--name}'[card name]:name' \
      '(-d --description)'{-d,--description}'[card description]:description' \
      '1:id:()'
    ;;
  edit-secret)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-l --url)'{-l,--url}'[edit url]:url' \
      '(-u --username)'{-u,--username}'[edit username]:username' \
      '(-p --password)'{-p,--password}'[edit password]:password' \
      '(-n --note)'{-n,--note}'[edit note]:note' \
      '(-f --file)'{-f,--file}'[change file]:file:_files' \
      '--name[edit name]:name' \
      '1:id:()'
    ;;
  edit-vault)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-n --name)'{-n,--name}'[vault name]:name' \
      '(-d --description)'{-d,--description}'[vault description]:description' \
      '--color[vault color]: :(blue orange purple green red)' \
      '1:id:()'
    ;;
  edit-workspace)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-n --name)'{-n,--name}'[workspace name]:name' \
      '(-d --description)'{-d,--description}'[workspace description]:description' \
      '1:id:()'
    ;;
  export-workspace)
    _arguments -n \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-f --file)'{-f,--file}'[exported zip file name (by default use workspace name)]:file' \
      '--raw[export as files instead of zip]' \
      '1:id:()' \
      '2:directory:_files'
    ;;
  get-file)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-o --output)'{-o,--output}'[output file (path must exists)]:file:_files' \
      '1:id:()'
    ;;
  import-workspace)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '(-i --use-ids)'{-i,--use-ids}'[try to use IDs to modify existing data]' \
      '1:file:_files'
    ;;
  show-secret)
     _arguments \
       '(-h --help)'{-h,--help}'[Show help]' \
       '(-l --url)'{-l,--url}'[show url]' \
       '(-u --username)'{-u,--username}'[show username]' \
       '(-p --password)'{-p,--password}'[show password]' \
       '(-n --note)'{-n,--note}'[show note]' \
       '--name[show name]' \
       '--file-name[show file name]' \
       '--file-size[show file size]' \
       '--type[show type (numeric)]' \
       '1:id:()'
    ;;
  delete-card | delete-secret | delete-vault | delete-workspace \
    list-cards | list-secrets | list-vaults | tree-workspace)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]' \
      '1:id:()'
    ;;
  list-workspaces)
    _arguments \
      '(-h --help)'{-h,--help}'[Show help]'
    ;;
esac

case ${state} in
  add_secret_args)
    case ${words[1]} in
      file)
        _arguments \
          '(-h --help)'{-h,--help}'[Show help]' \
          '(-l --url)'{-l,--url}'[optional url]:url' \
          '(-u --username)'{-u,--username}'[optional username]:username' \
          '(-p --password)'{-p,--password}'[optional password]:password' \
          '(-n --note)'{-n,--note}'[optional note]:note' \
          '1:id:()' \
          '2:name:()' \
          '3:file:_files'
        ;;
      note)
        _arguments \
          '(-h --help)'{-h,--help}'[Show help]' \
          '1:id:()' \
          '2:name:()' \
          '3:note:()'
        ;;
      password)
        _arguments \
          '(-h --help)'{-h,--help}'[Show help]' \
          '(-l --url)'{-l,--url}'[optional url]:url' \
          '(-u --username)'{-u,--username}'[optional username]:username' \
          '(-n --note)'{-n,--note}'[optional note]:note' \
          '1:id:()' \
          '2:name:()' \
          '3:password:()'
        ;;
    esac
    ;;
esac
